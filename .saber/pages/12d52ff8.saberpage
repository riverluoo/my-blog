{"page":{"attributes":{"slug":"middle/mysql","title":"mysql","date":"2019-04-03","layout":"post","excerpt":"<p>默认情况下 mysql 将 null 作为小值</p>\n","createdAt":"2019-04-03T00:00:00.000Z","updatedAt":"2019-05-10T06:13:19.423Z","type":"post","permalink":"/posts/middle/mysql.html"},"internal":{"id":"12d52ff8","absolute":"/root/src/my-blog/pages/_posts/middle/mysql.md","relative":"_posts/middle/mysql.md","isFile":true,"hoistedTags":[],"saved":false},"contentType":"markdown","content":"<h2 id=\"1%3A-%E6%8C%89%E7%85%A7-null-%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F\">1: 按照 null 进行排序</h2>\n<p>默认情况下 mysql 将 null 作为小值</p>\n<ul>\n<li>null 强制放在最前</li>\n</ul>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">if(isnull(字段名),0,1) asc</code></pre></div><ul>\n<li>null 强制放在最后</li>\n</ul>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">if(isnull(字段名),0,1) dsc\n\nif(isnull(字段名),1,0)  asc</code></pre></div><p>以 if(isnull(字段名),0,1)为例，它的意思是将该字段根据是否为 null 值分成两部分，\n值为 null 行相当于得到了一个隐含的排序属性 0，值为非 null 的行相当于得到了一个隐含的排序属性 1，\n在排序的时候，先根据这一隐含属性进行升序排列，因为 if(isnull(字段名),0,1)相当于 if(isnull(字段名),0,1)\nasc 省略了 asc 而已，所以自然地，排序字段为 null 的那些行（隐含排序属性）会在最前</p>\n<h1 id=\"2%3A-%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0\">2: 统计分析函数</h1>\n<h2 id=\"day\">day</h2>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">SELECT\nDATE(a.create_time) AS time\nFROM statistics_consumption a\nGROUP BY DATE(a.create_time)\nORDER BY DATE(a.create_time) DESC;</code></pre></div><h2 id=\"week\">week</h2>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">SELECT\nWEEK(a.create_time) AS time,\na.create_time\nFROM statistics_consumption a\nGROUP BY WEEK(a.create_time)\nORDER BY WEEK(a.create_time) DESC;</code></pre></div><h2 id=\"month\">month</h2>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">SELECT\nMONTH(a.create_time) AS time,\na.create_time\nFROM statistics_consumption a\nGROUP BY MONTH(a.create_time)\nORDER BY MONTH(a.create_time) DESC;</code></pre></div><h2 id=\"year\">year</h2>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">SELECT\nYEAR(a.create_time) AS time,\na.create_time\nFROM statistics_consumption a\nGROUP BY YEAR(a.create_time)\nORDER BY YEAR(a.create_time) DESC;</code></pre></div><h2 id=\"%E6%8B%BC%E6%8E%A5%E5%87%BD%E6%95%B0\">拼接函数</h2>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">CONCAT( DATE_FORMAT( NOW( ), '%Y' ), '-', MONTH ( consumption.create_time ) )</code></pre></div><h2 id=\"%E5%91%A8%E5%BC%80%E5%A7%8B%E5%92%8C%E7%BB%93%E6%9D%9F%E6%97%A5%E6%9C%9F\">周开始和结束日期</h2>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">SELECT year, week, x.start, ADDDATE(x.start, 6) AS end\n   FROM (\n SELECT ADDDATE(jan1, (t.week - WEEK(jan1, 5)) * 7 - WEEKDAY(jan1)) AS start, year, week\n   FROM (SELECT MAKEDATE(`year`, 1) AS jan1, year, week FROM t_table) t\n ) x;\n\n+------+------+------------+------------+\n| year | week | start      | end        |\n+------+------+------------+------------+\n| 2011 |    1 | 2011-01-03 | 2011-01-09 |\n| 2011 |    2 | 2011-01-10 | 2011-01-16 |\n| 2011 |    3 | 2011-01-17 | 2011-01-23 |\n| 2011 |   52 | 2011-12-26 | 2012-01-01 |\n+------+------+------------+------------+</code></pre></div><h2 id=\"week%EF%BC%88%EF%BC%89\">week（）</h2>\n<h3 id=\"%E6%98%AF%E4%BB%80%E4%B9%88\">是什么</h3>\n<p><a href=\"https://dev.mysql.com/doc/refman/5.6/en/date-and-time-functions.html\" target=\"_blank\" rel=\"noopener noreferrer\">官方手册</a>\n<img src=\"https://riverluooo.oss-cn-beijing.aliyuncs.com/img/20190104124614.png\" alt=\"\">\n函数返回的是周数，可以使用两个参数，mode 可以省略，使用 default-week-format 系统变量的值</p>\n<h3 id=\"%E4%BB%80%E4%B9%88%E7%94%A8\">什么用</h3>\n<ul>\n<li>获取日期所在的周数</li>\n<li>数据按照周进行统计</li>\n</ul>\n<h3 id=\"%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\">如何使用</h3>\n<ul>\n<li>如果包含 1 月 1 日的一周在新的一年中有 4 天或更多天，则为第 1 周</li>\n<li>否则，它是上一年的最后一周，下一周是第 1 周</li>\n</ul>\n<p><img src=\"https://riverluooo.oss-cn-beijing.aliyuncs.com/img/20190104132557.png\" alt=\"\"></p>\n<ul>\n<li>7\n范围 1-53 周\n从 0101 开始计算,第 1 周是今年星期一,上周为去年的最后一周<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">SELECT WEEK('2019-01-01',7);\n- 53\nSELECT WEEK('2019-01-07',7)\n- 1</code></pre></div></li>\n<li>5\n范围 0-53 周\n从今年 0101 开始计算,第 1 周是今年星期一,上周为第 0 周<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">SELECT WEEK('2019-01-01',5)\n- 0\nSELECT WEEK('2019-01-07',5)\n- 1</code></pre></div></li>\n<li>3\n范围 1-53 周\n从 0101 开始计算,第 1 周在今年有 4 天或更多天,不够则为去年最后一周<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">SELECT WEEK('2019-01-01',3)\n- 1\nSELECT WEEK('2017-01-01',3)\n- 52</code></pre></div></li>\n<li>1\n范围 0-53 周\n从 0101 开始计算,第 1 周是在今年有 4 天或更多天,不够则为第 0 周<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">SELECT WEEK('2019-01-01',1)\n- 1\nSELECT WEEK('2017-01-01',1)\n- 0</code></pre></div></li>\n</ul>\n<h3 id=\"%E5%BA%94%E7%94%A8\">应用</h3>\n<ul>\n<li>计算某一日期的周开始<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">SELECT DATE_FORMAT(\n  ADDDATE(\n    MAKEDATE( DATE_FORMAT( '2019-01-08', '%Y' ), 1 ),\n    ( WEEK ( '2019-01-08', 5 ) - WEEK ( MAKEDATE( DATE_FORMAT( '2019-01-08', '%Y' ), 1 ), 5 ) ) * 7 - WEEKDAY( MAKEDATE( DATE_FORMAT( '2019-01-08', '%Y' ), 1 ) )\n  ),\n'%Y-%m-%d'\n)</code></pre></div></li>\n<li>周结束\n周开始加 6 天</li>\n</ul>\n<h1 id=\"3%3A-explan\">3: explan</h1>\n<p>要了解索引 先来了解下 explan</p>\n<ul>\n<li>id\n是一组数字，标示查询总的执行 select 或操作表的顺序</li>\n</ul>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">EXPLAIN SELECT\n\tlog.ip\nFROM\n\tupms_log log\n\tLEFT JOIN upms_user USER ON log.username = USER.username\n\tLEFT JOIN upms_user_organization org ON USER.user_id = org.user_id\nORDER BY\n\tlog.start_time DESC</code></pre></div><p>id 相同，执行顺序由上至下</p>\n<p><img src=\"https://riverluooo.oss-cn-beijing.aliyuncs.com/img/20190507112719.png\" alt=\"\"></p>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">EXPLAIN SELECT\n\tlog.ip\nFROM\n\tupms_log log\n\tLEFT JOIN upms_user USER ON log.username = USER.username\n\tLEFT JOIN upms_user_organization org ON USER.user_id = org.user_id\nWHERE\n\tlog.log_id = ( SELECT log_id FROM upms_log WHERE start_time = 1553060552013 );</code></pre></div><p>有子查询，id 的序号会递增，id 值越大优先级越高，先被执行</p>\n<p><img src=\"https://riverluooo.oss-cn-beijing.aliyuncs.com/img/20190507131314.png\" alt=\"\"></p>\n<ul>\n<li>select_type\na. simple : 查询中不包含子查询或者 union\nb. primary : 查询中包含任何复杂的子查询，最外层查询标记\nc. subquery : 在 select 或者 where 列表中包含子查询\nd. derived : 用来表示包含在 from 子句中的子查询 select ,mysql 会递归执行，并将结果放到一个临时表中</li>\n</ul>\n<ul>\n<li>type</li>\n</ul>\n<p>all , index , range. ref , eg_ref, const, system, null</p>\n<p>有左到右 性能从最差到最好</p>\n<p>all : mysql 将遍历全表已找到匹配的行\nindex : 只遍历索引树\nrange : 对索引的扫描开始与某一点，返回匹配值的行，是带有 between 或者 where 子局中带有&lt; &gt; ； mysql 中使用使用 IN（）和 OR\nref : 使用非唯一索引扫描或者唯一的前缀扫描，返回匹配某个单独值的记录行\neq_erf : 使用索引是唯一索引，对于每个索引健值，表中只有一条记录匹配\nconst,system : mysql 对查询某部分进行优化，并转换为一个常量，使用这些类型访问，如将主键置于 where 列表中，mysql 就能将该查询转换为一个常量\nnull : 执行时不用访问表或者索引，如从一个索引列里选取最小值可以通过单独索引查找完成</p>\n<ul>\n<li>\n<p>possible_keys\nmysql 使用哪个索引在表中找到记录，查询涉及的字段若存在索引，则该索引将被列出，但不一定被查询使用</p>\n</li>\n<li>\n<p>key\n显示 mysql 中实际使用的索引，若没有索引，显示为 null</p>\n</li>\n<li>\n<p>key_len\n标示索引中使用的字节数，可通过改列计算查询使用的索引长度,为最大可能长度，并非实际使用长度</p>\n</li>\n<li>\n<p>ref\n表示表的连接匹配条件，哪些列或者常量被用于查找索引列上的值</p>\n</li>\n<li>\n<p>rows\n估算的找到所需记录所需要的行数</p>\n</li>\n<li>\n<p>extra\n包含不适合在其他列中显示但十分重要的额外信息\na. Using index :使用了覆盖索引（Covering index）mysql利用索引返回select列表中的字段，不必根据索引再次读取数据文件\n包含所有满足查询需要的数据的索引称为覆盖索引。使用覆盖索引,select列表中只取出需要的列,不可select*,如果将所有字段一起做索引\n会导致索引文件过大，查询性能下降</p>\n<p>b. Using where ： mysql将在存储引擎检索后在进行过滤，许多wheret条件里涉及的列，当他读取索引时，就能被存储引擎检验。\nc. Using temporary : 需要使用临时表来存储结果集，常见于排序和分组查询，常见的原因时使用了DISTINCT,或者使用order by 和group by 列\nd. Using filesort ： 无法利用索引完成的排序 文件排序\ne. Using join buffer : 在获取连接条件时 没有使用索引，并且需要连接缓冲区来存储中间结果，如果出现这个值，可能需要添加索引来改进\nf. Impossible where : where语句会导致没有符合条件的行\ng. Select tables optimized away : 仅通过使用索引，可以仅从聚合函数中返回一行</p>\n</li>\n</ul>\n<h1 id=\"4%3A-%E7%B4%A2%E5%BC%95\">4: 索引</h1>\n<p>索引是一种特殊的文件，会占用物理存储空间</p>\n<p>a. 普通索引</p>\n<p>b. 唯一索引</p>\n<p>c. 全文索引</p>\n<p>d. 单列索引，多列索引</p>\n<p>e. 组合索引（最左前缀）</p>\n<h1 id=\"5%3A-%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8%E5%AD%97%E7%AC%A6%E9%9B%86\">5: 修改数据库和表字符集</h1>\n<p>开发中遇到了不同表数据库字段的字符集编码方式不一致，导致部分索引失效的问题\n涉及的表众多，采用批量修改的方式</p>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">SELECT\n\t CONCAT('alter table ',a.table_name,' convert to character set utf8mb4 collate utf8mb4_general_ci;')\nFROM\n\t( SELECT table_name FROM information_schema.`TABLES` WHERE TABLE_SCHEMA = 'lng2' ) a;</code></pre></div><p><img src=\"https://riverluooo.oss-cn-beijing.aliyuncs.com/img/20190510140251.png\" alt=\"\"></p>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"sql\"><pre class=\"saber-highlight-code language-sql\"><code class=\"language-sql\">alter table appointment convert to character set utf8mb4 collate utf8mb4_general_ci;\nalter table book convert to character set utf8mb4 collate utf8mb4_general_ci;\nalter table muser convert to character set utf8mb4 collate utf8mb4_general_ci;</code></pre></div>"},"prop":{}}