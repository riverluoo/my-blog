{"page":{"attributes":{"slug":"concurrent/Java-thread","title":"java多线程","date":"2018-10-12","layout":"post","excerpt":"<p><img src=\"https://riverluooo.oss-cn-beijing.aliyuncs.com/img/20190409105102.png\" alt=\"\"></p>\n","createdAt":"2018-10-12T00:00:00.000Z","updatedAt":"2019-04-10T02:36:14.923Z","type":"post","permalink":"/posts/concurrent/Java-thread.html"},"internal":{"id":"66d9c223","absolute":"/root/src/my-blog/pages/_posts/concurrent/Java-thread.md","relative":"_posts/concurrent/Java-thread.md","isFile":true,"hoistedTags":[],"saved":false},"contentType":"markdown","content":"<h2 id=\"%E7%94%9F%E6%88%90%E7%8E%AF%E5%A2%83%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E6%9C%89%E9%81%97%E6%BC%8F\">生成环境定时任务有遗漏</h2>\n<h3 id=\"%E5%BC%82%E5%B8%B8%E6%97%A5%E5%BF%97\">异常日志</h3>\n<p><img src=\"https://riverluooo.oss-cn-beijing.aliyuncs.com/img/20190409105102.png\" alt=\"\"></p>\n<h3 id=\"%E6%AD%A3%E5%B8%B8%E6%97%A5%E5%BF%97\">正常日志</h3>\n<p><img src=\"https://riverluooo.oss-cn-beijing.aliyuncs.com/img/20190409105123.png\" alt=\"\"></p>\n<p>确定是定时任务阻塞，其中一个任务执行时间过长，导致其他任务无法执行</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/yihuihui/p/9416102.html\" target=\"_blank\" rel=\"noopener noreferrer\">定时任务使用</a></li>\n</ul>\n<h3 id=\"%E5%85%B3%E4%BA%8E-spring-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1\">关于 spring 定时任务</h3>\n<h3 id=\"%E5%90%AF%E5%8A%A8%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8\">启动异步调用</h3>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"java\"><pre class=\"saber-highlight-code language-java\"><code class=\"language-java\">@EnableScheduling\n@EnableAsync\n@Configuration\npublic class CronConfiguration {\n}</code></pre></div><h3 id=\"%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5%E8%B0%83%E7%94%A8\">使用异步调用</h3>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"java\"><pre class=\"saber-highlight-code language-java\"><code class=\"language-java\">@Scheduled(cron = &quot;0/30 * * * * ? &quot;)\n@Async\nprotected void addTotalFlow() {\n    log.info(&quot;CronJob#addTotalFlow&quot;);\n}</code></pre></div><h3 id=\"%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98\">新的问题</h3>\n<p>这样方式，每次执行都会启一个新的线程去执行，操作系统有最大线程数的限制<br>\n不加处理的，会导致进程挂掉。</p>\n<h3 id=\"%E6%9F%A5%E8%AF%A2%E5%BD%93%E5%89%8D%E6%95%B4%E4%B8%AA%E7%B3%BB%E7%BB%9F%E5%B7%B2%E7%94%A8%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%88%96%E8%BF%9B%E7%A8%8B%E6%95%B0\">查询当前整个系统已用的线程或进程数</h3>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"shell\"><pre class=\"saber-highlight-code language-shell\"><code class=\"language-shell\">pstree -p | wc -l</code></pre></div><h3 id=\"%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%96%B9%E5%BC%8F\">多线程的方式</h3>\n<div class=\"saber-highlight\" v-pre=\"\" data-lang=\"java\"><pre class=\"saber-highlight-code language-java\"><code class=\"language-java\">@Bean\npublic AsyncTaskExecutor asyncTaskExecutor() {\n    ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();\n    executor.setThreadNamePrefix(&quot;cron-job-&quot;);\n    executor.setMaxPoolSize(50);\n    executor.setCorePoolSize(10);\n    executor.setQueueCapacity(400);\n    executor.setRejectedExecutionHandler(new ThreadPoolExecutor.AbortPolicy());\n    return executor;\n}</code></pre></div>"},"prop":{}}